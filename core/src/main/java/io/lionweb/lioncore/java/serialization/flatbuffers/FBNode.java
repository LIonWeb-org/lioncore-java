// automatically generated by the FlatBuffers compiler, do not modify

package io.lionweb.lioncore.java.serialization.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FBNode extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static FBNode getRootAsFBNode(ByteBuffer _bb) { return getRootAsFBNode(_bb, new FBNode()); }
  public static FBNode getRootAsFBNode(ByteBuffer _bb, FBNode obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FBNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int classifier() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public FBProperty properties(int j) { return properties(new FBProperty(), j); }
  public FBProperty properties(FBProperty obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public FBProperty.Vector propertiesVector() { return propertiesVector(new FBProperty.Vector()); }
  public FBProperty.Vector propertiesVector(FBProperty.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public FBContainment containments(int j) { return containments(new FBContainment(), j); }
  public FBContainment containments(FBContainment obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int containmentsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public FBContainment.Vector containmentsVector() { return containmentsVector(new FBContainment.Vector()); }
  public FBContainment.Vector containmentsVector(FBContainment.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public FBReference references(int j) { return references(new FBReference(), j); }
  public FBReference references(FBReference obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int referencesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public FBReference.Vector referencesVector() { return referencesVector(new FBReference.Vector()); }
  public FBReference.Vector referencesVector(FBReference.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public FBAnnotation annotations(int j) { return annotations(new FBAnnotation(), j); }
  public FBAnnotation annotations(FBAnnotation obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int annotationsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public FBAnnotation.Vector annotationsVector() { return annotationsVector(new FBAnnotation.Vector()); }
  public FBAnnotation.Vector annotationsVector(FBAnnotation.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int parent() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createFBNode(FlatBufferBuilder builder,
      int id,
      int classifier,
      int propertiesOffset,
      int containmentsOffset,
      int referencesOffset,
      int annotationsOffset,
      int parent) {
    builder.startTable(7);
    FBNode.addParent(builder, parent);
    FBNode.addAnnotations(builder, annotationsOffset);
    FBNode.addReferences(builder, referencesOffset);
    FBNode.addContainments(builder, containmentsOffset);
    FBNode.addProperties(builder, propertiesOffset);
    FBNode.addClassifier(builder, classifier);
    FBNode.addId(builder, id);
    return FBNode.endFBNode(builder);
  }

  public static void startFBNode(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(0, id, 0); }
  public static void addClassifier(FlatBufferBuilder builder, int classifier) { builder.addInt(1, classifier, 0); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(2, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addContainments(FlatBufferBuilder builder, int containmentsOffset) { builder.addOffset(3, containmentsOffset, 0); }
  public static int createContainmentsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startContainmentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReferences(FlatBufferBuilder builder, int referencesOffset) { builder.addOffset(4, referencesOffset, 0); }
  public static int createReferencesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startReferencesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAnnotations(FlatBufferBuilder builder, int annotationsOffset) { builder.addOffset(5, annotationsOffset, 0); }
  public static int createAnnotationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAnnotationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addParent(FlatBufferBuilder builder, int parent) { builder.addInt(6, parent, 0); }
  public static int endFBNode(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FBNode get(int j) { return get(new FBNode(), j); }
    public FBNode get(FBNode obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

