import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenCentral()
    // Required for MPS OpenAPI and Modelix's Model API
    maven {
        url 'https://artifacts.itemis.cloud/repository/maven-mps/'
    }
}

configurations {
    javadocConfig.extendsFrom testImplementation
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    javadocConfig 'org.eclipse.emf:org.eclipse.emf.ecore:2.28.0'

    // Please note that this forces us to use Java 11 for the javadoc tasks
    // unfortunately earlier version of these libraries, which were compatible with Java 8, are not available
    // on Maven
    javadocConfig 'com.jetbrains:mps-openapi:2021.3.1'

    javadocConfig 'org.modelix:model-api:1.3.2'

    implementation("com.google.code.gson:gson:2.10.1")

    implementation group: 'com.networknt', name: 'json-schema-validator', version: '1.0.77'
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.javadocConfig
    options {
        links 'https://docs.oracle.com/javase/8/docs/api/'
        links 'https://download.eclipse.org/modeling/emf/emf/javadoc/2.10.0/'
        links 'https://alexanderpann.github.io/mps-openapi-doc/javadoc_2021.2/'
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    archiveClassifier = "javadoc"
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    // See https://discuss.gradle.org/t/why-subproject-sourceset-dirs-project-sourceset-dirs/7376/5
    // Without the closure, parent sources are used for children too
    from { sourceSets.main.allSource }
}

publishing {

    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }

    publications {
        lioncore_java_core(MavenPublication) {
            from components.java
            groupId = 'io.lionweb.lioncore-java'
            artifactId "lioncore-java-" + project.name
            artifact sourcesJar
            artifact javadocJar
            suppressPomMetadataWarningsFor('cliApiElements')
            suppressPomMetadataWarningsFor('cliRuntimeElements')
            pom {
                name = "lioncore-java-" + project.name
                description = "Java APIs for the LIonWeb system"
                version = project.version
                packaging = 'jar'
                url = 'https://github.com/LIonWeb-org/lioncore-java'

                scm {
                    connection = 'scm:git:https://github.com/LIonWeb-org/lioncore-java.git'
                    developerConnection = 'scm:git:git@github.com:LIonWeb-org/lioncore-java.git'
                    url = 'https://github.com/LIonWeb-org/lioncore-java.git'
                }

                licenses {
                    license {
                        name = 'Apache Licenve V2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        distribution = 'repo'
                    }
                }

                // The developers entry is strictly required by Maven Central
                developers {
                    developer {
                        id = 'ftomassetti'
                        name = 'Federico Tomassetti'
                        email = 'federico@strumenta.com'
                    }
                    developer {
                        id = 'dslmeinte'
                        name = 'Meinte Boersma'
                        email = 'meinte.boersma@gmail.com'
                    }
                    developer {
                        id = 'enikao'
                        name = 'Niko Stotz'
                        email = 'niko.stotz@nikostotz.de'
                    }
                }

            }
        }
        lioncore_java_core_fat(MavenPublication) {
            groupId = 'io.lionweb.lioncore-java'
            artifactId "lioncore-java-" + project.name + "-fat"
            artifact sourcesJar
            artifact javadocJar
            artifact new File(buildDir, "libs/core-${version}-all.jar")
            pom {
                name = "lioncore-java-" + project.name + "-fat"
                description = "Java APIs for the LIonWeb system"
                version = project.version
                packaging = 'jar'
                url = 'https://github.com/LIonWeb-org/lioncore-java'

                scm {
                    connection = 'scm:git:https://github.com/LIonWeb-org/lioncore-java.git'
                    developerConnection = 'scm:git:git@github.com:LIonWeb-org/lioncore-java.git'
                    url = 'https://github.com/LIonWeb-org/lioncore-java.git'
                }

                licenses {
                    license {
                        name = 'Apache Licenve V2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        distribution = 'repo'
                    }
                }

                // The developers entry is strictly required by Maven Central
                developers {
                    developer {
                        id = 'ftomassetti'
                        name = 'Federico Tomassetti'
                        email = 'federico@strumenta.com'
                    }
                    developer {
                        id = 'dslmeinte'
                        name = 'Meinte Boersma'
                        email = 'meinte.boersma@gmail.com'
                    }
                    developer {
                        id = 'enikao'
                        name = 'Niko Stotz'
                        email = 'niko.stotz@nikostotz.de'
                    }
                }

            }
        }
    }
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

signing {
    sign publishing.publications.lioncore_java_core
    sign publishing.publications.lioncore_java_core_fat
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
}

tasks.withType(ShadowJar) {
    dependsOn relocateShadowJar
    relocate 'com.google.gson', 'relocated.lionweb.com.google.gson'
}

tasks.named("publishLioncore_java_core_fatPublicationToMavenLocal") {
    dependsOn("shadowJar")
}

tasks.named("publishLioncore_java_core_fatPublicationToMavenRepository") {
    dependsOn("shadowJar")
    dependsOn("signLioncore_java_corePublication")
}

tasks.named("signLioncore_java_corePublication") {
    dependsOn("shadowJar")
}

tasks.named("signLioncore_java_core_fatPublication") {
    dependsOn("shadowJar")
}

tasks.named("publishLioncore_java_corePublicationToMavenRepository") {
    dependsOn("signLioncore_java_core_fatPublication")
}