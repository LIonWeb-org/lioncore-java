plugins {
    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    mwe2.extendsFrom compileClasspath
}

dependencies {
    api emf.common
    api emf.ecore
    api emf.ecore.change
    api emf.ecore.xmi
    mwe2("org.eclipse.emf:org.eclipse.emf.mwe2.launch:$mwe2LaunchVersion")
    mwe2("org.eclipse.xtext:org.eclipse.xtext.common.types:$xtextVersion")
    mwe2("org.eclipse.xtext:org.eclipse.xtext.xtext.generator:$xtextVersion")
}

tasks.register("generateXtextLanguage", JavaExec) {
    mainClass.set("org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher")
    classpath = configurations.mwe2
    args = args?.plus("src/main/java/io/lionweb/java/emf/builtins/GenerateBuiltins.mwe2")
    args = args?.plus("-p")
    args = args?.plus("rootPath=/${projectDir}")
}

tasks.compileJava.dependsOn("generateXtextLanguage")
tasks.processResources.dependsOn("generateXtextLanguage")
tasks.clean.dependsOn("cleanGenerateXtextLanguage")

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(JavaVersion.toVersion("${jvmVersion}").getMajorVersion())
    }
}

sourceSets {
    main {
        java {
            srcDirs([
                    "${projectDir}/src-gen/main/java",
                    "${projectDir}/src/main/java"
            ])
        }
        resources {
            srcDirs([
                    "${projectDir}/src/main/resources",
                    "${projectDir}/src/main/model"
            ])
        }
    }
}